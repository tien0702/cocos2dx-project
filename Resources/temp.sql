PRAGMA foreign_keys = off;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS Ability (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, level INTEGER NOT NULL DEFAULT (0), unlock_level INTEGER DEFAULT (0) NOT NULL, equip_location TEXT REFERENCES AbilityEquipLocation (name), power_id INTEGER REFERENCES Power (id), name TEXT UNIQUE NOT NULL, description TEXT, icon_path TEXT NOT NULL, state_alloweds TEXT NOT NULL DEFAULT (1));
CREATE TABLE IF NOT EXISTS AbilityEquipLocation (name TEXT PRIMARY KEY NOT NULL);
CREATE TABLE IF NOT EXISTS AbilityStat (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, stat_name TEXT REFERENCES Stat (name) NOT NULL, ability_name TEXT REFERENCES Ability (name) NOT NULL, value INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS Bonus (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, stat_name TEXT REFERENCES Stat (name) NOT NULL, modifi_type_name REFERENCES StatModificationType (name) NOT NULL, effect_type TEXT NOT NULL, duration INTEGER NOT NULL DEFAULT (0), start_time INTEGER NOT NULL DEFAULT (0), value INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS BonusDeck (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, bonuses_id TEXT NOT NULL);
CREATE TABLE IF NOT EXISTS Chapter (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, name TEXT NOT NULL UNIQUE, reward_id NOT NULL REFERENCES Reward (id), state INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS ChapterMap (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, "index" INTEGER NOT NULL DEFAULT (0), chapter_name TEXT REFERENCES Chapter (name) NOT NULL, tile_map_name TEXT NOT NULL DEFAULT map0, is_cleared INTEGER DEFAULT (0) NOT NULL, bonus_deck_id INTEGER NOT NULL DEFAULT (0) REFERENCES BonusDeck (id), reward_id INTEGER REFERENCES Reward (id), reward_on_completed TEXT, enemy_wave_json TEXT);
CREATE TABLE IF NOT EXISTS Coin (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, name TEXT UNIQUE NOT NULL, quantity INTEGER NOT NULL DEFAULT (0), icon_path TEXT);
CREATE TABLE IF NOT EXISTS ConsumableItem (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, consumable_item_template INTEGER REFERENCES ConsumableItemTemplate (id) NOT NULL, quantity INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS ConsumableItemTemplate (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, item_base_name TEXT REFERENCES ItemBase (name) NOT NULL UNIQUE, bonus_id INTEGER NOT NULL REFERENCES Bonus (id), consumable_type TEXT NOT NULL DEFAULT Food REFERENCES ConsumableItemType (name));
CREATE TABLE IF NOT EXISTS ConsumableItemType (name TEXT PRIMARY KEY UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS ElementType (name TEXT NOT NULL UNIQUE PRIMARY KEY);
CREATE TABLE IF NOT EXISTS Entity (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, entity_type_id INT NOT NULL, name TEXT NOT NULL UNIQUE, exps INT NOT NULL, weight INT NOT NULL, portraitFileName TEXT NOT NULL, spriteFileName TEXT NOT NULL, size TEXT NOT NULL DEFAULT (0), states TEXT NOT NULL DEFAULT spawn, FOREIGN KEY (entity_type_id) REFERENCES EntityType (id));
CREATE TABLE IF NOT EXISTS EntityStat (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, entity_name TEXT REFERENCES Entity (name) NOT NULL, stat_name TEXT REFERENCES Stat (name) NOT NULL, value INTEGER NOT NULL DEFAULT (0), growth_value INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS EntityType (
    id           INT  PRIMARY KEY
                      UNIQUE
                      NOT NULL,
    name         TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS EquipableLocation (name TEXT PRIMARY KEY NOT NULL);
CREATE TABLE IF NOT EXISTS ItemBase (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, item_type_id INT NOT NULL, equipable_locaion TEXT NOT NULL DEFAULT Weapon REFERENCES EquipableLocation (name), quality TEXT NOT NULL REFERENCES ItemQuality (name), name TEXT NOT NULL UNIQUE, weight REAL NOT NULL DEFAULT 0, description TEXT NOT NULL, prices TEXT NOT NULL DEFAULT (0), icon_path TEXT NOT NULL, FOREIGN KEY (item_type_id) REFERENCES ItemType (id));
CREATE TABLE IF NOT EXISTS ItemQuality (name TEXT PRIMARY KEY UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS ItemType (
    id   INT  PRIMARY KEY
    NOT NULL,
    name TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS ObjectStat (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, stat_name TEXT REFERENCES Stat (name) NOT NULL, value INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS PassiveSkill (
    id           INTEGER PRIMARY KEY AUTOINCREMENT
                         UNIQUE,
    name         TEXT    NOT NULL,
    level        INTEGER NOT NULL,
    cooldown     REAL    NOT NULL,
    success_rate REAL    NOT NULL
                         DEFAULT 1,
    mana_needed  INTEGER NOT NULL
                         DEFAULT 0,
    description  TEXT    NOT NULL,
    condition    TEXT    NOT NULL
);
CREATE TABLE IF NOT EXISTS Player (ultimate_name_equip TEXT REFERENCES Skill (skill_template_name), talen_name_equip TEXT REFERENCES Skill (skill_template_name)) STRICT;
CREATE TABLE IF NOT EXISTS Power (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, value REAL NOT NULL, value_number INT NOT NULL, element_type_name TEXT NOT NULL REFERENCES ElementType (name), FOREIGN KEY (element_type_name) REFERENCES ElementType);
CREATE TABLE IF NOT EXISTS Projectile (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, projectile_range REAL NOT NULL, speed REAL NOT NULL, ani_file_name TEXT NOT NULL, des_ani_name TEXT NOT NULL, radius REAL NOT NULL DEFAULT (1));
CREATE TABLE IF NOT EXISTS Reward (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, exp_reward INTEGER NOT NULL DEFAULT (0), info_coin TEXT NOT NULL, info_items TEXT NOT NULL);
CREATE TABLE IF NOT EXISTS Skill (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL DEFAULT (0), skill_template_name TEXT REFERENCES SkillTemplate (name) UNIQUE, level INTEGER NOT NULL DEFAULT (0), equipped INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS SkillStat (id INTEGER PRIMARY KEY AUTOINCREMENT, skill_name TEXT REFERENCES SkillTemplate (name), stat_name TEXT REFERENCES Stat (name), _value INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS SkillTemplate (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, name TEXT UNIQUE NOT NULL DEFAULT defaultSkill, description TEXT, icon_name TEXT, effect_name TEXT, input_id INTEGER, targeting_type INTEGER, activation_type INTEGER NOT NULL DEFAULT (0), power_id INTEGER REFERENCES Power (id));
CREATE TABLE IF NOT EXISTS Stat (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL, type INT NOT NULL DEFAULT 0, name TEXT NOT NULL UNIQUE, abbreviation TEXT NOT NULL, value_type TEXT REFERENCES ValueType (name) NOT NULL DEFAULT OnlyNumber, description TEXT NOT NULL);
CREATE TABLE IF NOT EXISTS StatModificationType (name PRIMARY KEY UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS ValueType (name TEXT PRIMARY KEY UNIQUE NOT NULL);
CREATE TABLE IF NOT EXISTS Weapon (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE, weapon_template_id INTEGER REFERENCES WeaponTemplate (id) NOT NULL, level INTEGER DEFAULT (1) NOT NULL, locked BLOB NOT NULL DEFAULT (false), equipped BLOB DEFAULT (0) NOT NULL, exps INTEGER NOT NULL DEFAULT (0));
CREATE TABLE IF NOT EXISTS WeaponTemplate (id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE, item_base_name TEXT REFERENCES ItemBase (name) NOT NULL, projectile_id INT NOT NULL, passive_skill_id INTEGER NOT NULL REFERENCES PassiveSkill (id) ON DELETE SET NULL ON UPDATE SET DEFAULT DEFAULT (1), bonus_id INT NOT NULL REFERENCES Bonus (id), atk_bns INT NOT NULL DEFAULT 0, weap_range REAL NOT NULL, type INT NOT NULL DEFAULT 0, state_alloweds TEXT NOT NULL DEFAULT '1', FOREIGN KEY (bonus_id) REFERENCES Bonus (id), FOREIGN KEY (projectile_id) REFERENCES Projectile (id), FOREIGN KEY (passive_skill_id) REFERENCES PassiveSkill (id));
COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
